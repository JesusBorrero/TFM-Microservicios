{
	"info": {
		"_postman_id": "3e64491c-f1e9-47d5-85f4-1ea94d93dbf1",
		"name": "sagas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create valid customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.globals.set(\"customerId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Javier Gomez\",\n    \"credit\":\"2000\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{customersUrl}}/customers",
					"host": [
						"{{customersUrl}}"
					],
					"path": [
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Credit still 2000\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.credit).to.eql(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{customersUrl}}/customers/{{customerId}}",
					"host": [
						"{{customersUrl}}"
					],
					"path": [
						"customers",
						"{{customerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add credit to customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Credit is now 3000\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.credit).to.eql(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"operation\":\"ADD\",\"amount\":1000}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{customersUrl}}/customers/{{customerId}}",
					"host": [
						"{{customersUrl}}"
					],
					"path": [
						"customers",
						"{{customerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create valid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.globals.set(\"productId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Super nice chair\",\n    \"stock\":\"20\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{productsUrl}}/products",
					"host": [
						"{{productsUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Stock still 20\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.stock).to.eql(20);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{productsUrl}}/products/{{productId}}",
					"host": [
						"{{productsUrl}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add stock to product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Stock is now 30\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.stock).to.eql(30);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"operation\":\"ADD\",\"amount\":10}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{productsUrl}}/products/{{productId}}",
					"host": [
						"{{productsUrl}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create valid order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.globals.set(\"orderId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customerId\": {{customerId}},\n    \"productId\": {{productId}},\n    \"totalCost\": 2000,\n    \"productQuantity\":20\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ordersUrl}}/orders",
					"host": [
						"{{ordersUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Order got created successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.customerId).to.eql(pm.globals.get(\"customerId\"));",
							"    pm.expect(jsonData.totalCost).to.eql(2000.0);",
							"    pm.expect(jsonData.productId).to.eql(pm.globals.get(\"productId\"));",
							"    pm.expect(jsonData.productQuantity).to.eql(20);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ordersUrl}}/orders/{{orderId}}",
					"host": [
						"{{ordersUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get detailed order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Order got created successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.customerId).to.eql(pm.globals.get(\"customerId\"));",
							"    pm.expect(jsonData.totalCost).to.eql(2000.0);",
							"    pm.expect(jsonData.productId).to.eql(pm.globals.get(\"productId\"));",
							"    pm.expect(jsonData.productQuantity).to.eql(20);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ordersUrl}}/orders/{{orderId}}",
					"host": [
						"{{ordersUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product stock got updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Stock is now 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.stock).to.eql(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{productsUrl}}/products/{{productId}}",
					"host": [
						"{{productsUrl}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer credit got updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Credit is now  1000\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.credit).to.eql(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{customersUrl}}/customers/{{customerId}}",
					"host": [
						"{{customersUrl}}"
					],
					"path": [
						"customers",
						"{{customerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order expect not enough credit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Expected error message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Not enough credit\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customerId\": {{customerId}},\n    \"productId\": {{productId}},\n    \"totalCost\": 2000,\n    \"productQuantity\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ordersUrl}}/orders",
					"host": [
						"{{ordersUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order expect not enough stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Expected error message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Not enough stock\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customerId\": {{customerId}},\n    \"productId\": {{productId}},\n    \"totalCost\": 1,\n    \"productQuantity\":20\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ordersUrl}}/orders",
					"host": [
						"{{ordersUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product stock is untouched",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Stock is now 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.stock).to.eql(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{productsUrl}}/products/{{productId}}",
					"host": [
						"{{productsUrl}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer credit  is untouched",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Credit is now  1000\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.credit).to.eql(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{customersUrl}}/customers/{{customerId}}",
					"host": [
						"{{customersUrl}}"
					],
					"path": [
						"customers",
						"{{customerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Subtract credit to customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Credit is now 0\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.credit).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"operation\":\"DEDUCT\",\"amount\":1000}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{customersUrl}}/customers/{{customerId}}",
					"host": [
						"{{customersUrl}}"
					],
					"path": [
						"customers",
						"{{customerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Subtract stock to product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Stock is now 0\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.stock).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"operation\":\"DEDUCT\",\"amount\":10}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{productsUrl}}/products/{{productId}}",
					"host": [
						"{{productsUrl}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{customersUrl}}/customers/{{customerId}}",
					"host": [
						"{{customersUrl}}"
					],
					"path": [
						"customers",
						"{{customerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{productsUrl}}/products/{{productId}}",
					"host": [
						"{{productsUrl}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{ordersUrl}}/orders/{{orderId}}",
					"host": [
						"{{ordersUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		}
	]
}